{"version":3,"sources":["components/header.jsx","components/coin2coinConverter/instructions.jsx","components/coin2coinConverter/output.jsx","components/coin2coinConverter/converter.jsx","components/footer.jsx","App.js","index.js"],"names":["Header","className","Instructions","Output","cryptoOne","cryptoTwo","amount","useState","output","setOutput","useEffect","axios","get","params","base_currency_id","quote_currency_id","then","response","data","price","catch","err","console","log","finalOutput","parseFloat","toFixed","isNaN","Converter","cryptoList","setCryptoList","setCryptoOne","setCryptoTwo","setAmount","Form","Group","Label","Control","as","onChange","e","target","value","slice","map","crypto","i","id","key","name","type","pattern","size","placeholder","Footer","App","ReactDOM","render","document","getElementById"],"mappings":"wPAiBeA,MAdf,WAGI,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,SACX,iECEDC,MATf,WAEI,OACI,yBAAKD,UAAU,gBACX,oN,+BC0BGE,MA7Bf,YAAiD,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,OAAS,EAElBC,mBAAS,IAFS,mBAEvCC,EAFuC,KAE/BC,EAF+B,KAI5CC,qBAAU,WACNC,IAAMC,IAAN,iDAA4D,CACxDC,OAAQ,CAACC,iBAAkBV,EACnBW,kBAAmBV,EACnBC,OAAQA,IAEjBE,GAEFQ,MAAK,SAAAC,GACFR,EAAUQ,EAASC,KAAKC,UAEzBC,OAAM,SAAAC,GACLC,QAAQC,IAAI,4EAAkBF,SAItC,IAAIG,EAAcC,WAAWjB,GAAQkB,QAAQ,GAE7C,OAAIC,MAAMH,IAA0B,GAAVlB,EACf,iEAEA,uDAA6BA,EAA7B,gBAAkDkB,ICwFlDI,MA/Gf,WAAqB,MAGiBrB,mBAAS,IAH1B,mBAGZsB,EAHY,KAGAC,EAHA,OAMevB,mBAAS,IANxB,mBAMZH,EANY,KAMD2B,EANC,OAOexB,mBAAS,IAPxB,mBAOZF,EAPY,KAOD2B,EAPC,OASSzB,mBAAS,GATlB,mBASZD,EATY,KASJ2B,EATI,KAwCjB,OAZAvB,qBAAU,WACNC,IAAMC,IAAN,uCAAkDiB,GAEjDb,MAAK,SAAAC,GACFa,EAAcb,EAASC,SAEvBE,OAAM,SAAAC,GACNC,QAAQC,IAAIF,QAEjB,IAIC,6BAkCI,kBAACa,EAAA,EAAD,CAAMjC,UAAU,QACZ,kBAACiC,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,2CACI,kBAACF,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,mBACA,kBAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,SAASC,SApEzB,SAACC,GACtBT,EAAaS,EAAEC,OAAOC,QAmEsDzC,UAAU,OAClE,gDACC4B,EAAWc,MAAM,EAAE,IAAIC,KAAI,SAACC,EAAQC,GAAT,OACpB,4BAAQJ,MAAOG,EAAOE,GAAIC,IAAKF,GAAID,EAAOI,WAK1D,kBAACf,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,mBACA,kBAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,SAASC,SAzErB,SAACC,GACtBR,EAAaQ,EAAEC,OAAOC,SAyEF,gDACCb,EAAWc,MAAM,EAAE,IAAIC,KAAI,SAACC,EAAQC,GAAT,OACpB,4BAAQJ,MAAOG,EAAOE,GAAIC,IAAKF,GAAID,EAAOI,WAI1D,kBAACf,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,gBACA,kBAACF,EAAA,EAAKG,QAAN,CAAca,KAAK,OAAOC,QAAQ,SAASC,KAAK,KAAKC,YAAY,IAAId,SA7EpE,SAACC,GAClBP,EAAUO,EAAEC,OAAOC,WA+EP,kBAAC,EAAD,CAAQtC,UAAWA,EAAWC,UAAWA,EAAWC,OAAQA,QC/FjEgD,MAVf,WAGI,OACI,yBAAKrD,UAAU,UACX,oDCgBGsD,MAjBf,WACE,OACE,yBAAKtD,UAAU,iBACb,gCACE,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,gCACE,kBAAC,EAAD,SCXRuD,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.5a71c3d8.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction Header() {\n\n\n    return (\n        <div className='header-container'>\n            <div className='title'>\n                <h1>\n                    Cryptocurrency Exhange Program\n                </h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react'\n\nfunction Instructions() {\n\n    return (\n        <div className='instructions'>\n            <h3>The rules are simple. Choose two differnt types of cryptocurrency from the current top 10, enter the amount of units you wish to convert, and see that sweet sweet conversion rate</h3>\n        </div>\n    )\n}\n\nexport default Instructions","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nfunction Output({cryptoOne, cryptoTwo, amount}) {\n\n    let [output, setOutput] = useState([])\n\n    useEffect(() => {\n        axios.get(`https://api.coinpaprika.com/v1/price-converter`, {\n            params: {base_currency_id: cryptoOne,\n                    quote_currency_id: cryptoTwo,\n                    amount: amount\n            }\n        }, output)\n\n        .then(response => {\n            setOutput(response.data.price)\n            // console.log(response.data.price)\n        }).catch(err => {\n            console.log('üê≥üê≥üê≥üê≥üê≥üê≥ ' + err)\n        })\n    })\n\n    let finalOutput = parseFloat(output).toFixed(2)\n\n    if (isNaN(finalOutput) && amount == 0) {\n        return <h3>Please select currency to compare</h3>\n    } else {\n        return <h3>The conversion rate per {amount} unit(s) is: {finalOutput}</h3>\n    }\n}\n\nexport default Output","import React, {useState, useEffect} from 'react';\nimport {Form} from 'react-bootstrap'\nimport axios from 'axios';\nimport Output from './output';\n\nfunction Converter() {\n\n    // api list of crypto coins\n    let [cryptoList, setCryptoList] = useState([]);\n\n    // states for holding which crypto is picked in conversion form\n    let [cryptoOne, setCryptoOne] = useState('');\n    let [cryptoTwo, setCryptoTwo] = useState('');\n\n    let [amount, setAmount] = useState(0)\n\n\n    let cryptoOneSelection = (e) => {\n        setCryptoOne(e.target.value)\n        // console.log(cryptoOne)\n    }\n\n    let cryptoTwoSelection = (e) => {\n        setCryptoTwo(e.target.value)\n        // console.log(cryptoTwo)\n    }\n\n    let currencyAmount = (e) => {\n        setAmount(e.target.value)\n        // console.log(typeof(amount))\n    }\n\n    // function to get list of crypto currency for rate comparison\n    useEffect(() => {\n        axios.get(`https://api.coinpaprika.com/v1/coins`, cryptoList)\n\n        .then(response => {\n            setCryptoList(response.data)\n            // console.log(response.data[0])\n        }) .catch(err => {\n            console.log(err)\n        })\n    }, [])\n\n\n    return (\n        <div>\n            {/* <div className='form-container'>\n                <form className='form'>\n                    <div className='form-main-label'>\n                        <label>Select currencies to compare below</label>\n                    </div>\n                    <div className='form-coinOne'>\n                        <label>Coin One: </label>\n                        <select onChange={cryptoOneSelection}>\n                            <option>Select Below</option>\n                            {cryptoList.slice(0,10).map((crypto, i) => (\n                                <option value={crypto.id} key={i}>{crypto.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className='form-coinTwo'>\n                        <label>Coin Two: </label>\n                        <select onChange={cryptoTwoSelection}>\n                            <option>Select Below</option>\n                            {cryptoList.slice(0,10).map((crypto, i) => (\n                                <option value={crypto.id} key={i}>{crypto.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className='form-units'>\n                        <label>Amount: </label>\n                        <input type='text' pattern='[0-9]*' placeholder='0' onChange={currencyAmount} size='13'></input>\n                    </div>\n                    <div className='form-output'>\n                        <Output cryptoOne={cryptoOne} cryptoTwo={cryptoTwo} amount={amount} />\n                    </div>\n                </form>\n            </div> */}\n\n            <Form className='form'>\n                <Form.Group>\n                    <Form.Label>Select Currencies to compare below</Form.Label>\n                        <Form.Group>\n                            <Form.Label>Coin One: </Form.Label>\n                            <Form.Control as='select' onChange={cryptoOneSelection} className='p-5'>\n                            <option>Select Below</option>\n                            {cryptoList.slice(0,10).map((crypto, i) => (\n                                    <option value={crypto.id} key={i}>{crypto.name}</option>\n                            ))}\n                            </Form.Control>\n                        </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Coin Two: </Form.Label>\n                        <Form.Control as='select' onChange={cryptoTwoSelection}>\n                            <option>Select Below</option>\n                            {cryptoList.slice(0,10).map((crypto, i) => (\n                                    <option value={crypto.id} key={i}>{crypto.name}</option>\n                            ))}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Amount </Form.Label>\n                        <Form.Control type='text' pattern='[0-9]*' size='lg' placeholder='0' onChange={currencyAmount}></Form.Control>\n                    </Form.Group>\n\n                    <Output cryptoOne={cryptoOne} cryptoTwo={cryptoTwo} amount={amount} />\n                </Form.Group>\n            </Form>\n\n\n        </div>\n    )\n}\n\nexport default Converter","import React from 'react';\n\nfunction Footer() {\n\n\n    return (\n        <div className='footer'>\n            <p>¬© Copyright 2020</p>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Header from './components/header'\nimport Instructions from './components/coin2coinConverter/instructions';\nimport Converter from './components/coin2coinConverter/converter';\nimport Footer from './components/footer';\n\nfunction App() {\n  return (\n    <div className='app-container'>\n      <header>\n        <Header />\n      </header>\n      <div>\n        <Instructions />\n        <Converter />\n      </div>\n      <footer>\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}